{"version":3,"file":"couchDBChangesFeed.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAiB,QAAID,IAErBD,EAAc,QAAIC,GACnB,CATD,CASGK,MAAM,KCTT,WACE,MAAMC,EAAc,GACpB,IACIC,EACAC,EAEAC,EAJAC,GAAY,EAKhB,MAAMC,EAAa,IAAIC,gBAEvBC,KAAKC,UAAY,SAAUC,GACzB,IAAIC,EAAOD,EAAEE,MAAM,GACnBX,EAAYY,KAAKF,GAEjBA,EAAKG,YAAY,CACfC,KAAM,aACNC,aAAcf,EAAYgB,SAG5BN,EAAKO,UAAY,SAAUC,GACzB,GAA2B,UAAvBA,EAAMC,KAAKC,QAcb,OAbAC,QAAQC,MAAM,kCACdtB,EAAYuB,OAAOL,EAAMC,KAAKJ,aAAe,EAAG,GAC5Cf,EAAYgB,QAAU,GAExBX,EAAWmB,QAGbpB,GAAY,EAEZH,EAAiBwB,oBAAoB,UAAWlB,KAAKmB,gBACrDzB,EAAiB0B,aACjBN,QAAQC,MAAM,iCAKhB,GAA2B,YAAvBJ,EAAMC,KAAKC,QAAuB,CACpC,IAAkB,IAAdhB,EACF,OAGFF,EAAiBgB,EAAMC,KAAKS,IAC5BrB,KAAKsB,kBACP,CACF,EAEAnB,EAAKoB,OACP,EAEAvB,KAAKwB,QAAU,SAAUC,GACvBzB,KAAK0B,4BACLZ,QAAQW,MAAM,8BAA+BA,EAC/C,EAEAzB,KAAK2B,OAAS,WACZ3B,KAAK0B,2BACP,EAEA1B,KAAKmB,eAAiB,SAAUR,GAC9BX,KAAK0B,4BACLZ,QAAQC,MAAM,uCAEd,MAAMa,EAAgBC,KAAKC,MAAMnB,EAAMC,MACvCnB,EAAYsC,SAAQ,SAAUC,GAC5BA,EAAW1B,YAAY,CACrBsB,iBAEJ,GACF,EAEA5B,KAAKsB,iBAAmB,WAClB1B,GACFqC,aAAarC,GAOfA,EAAiBsC,WAAWlC,KAAKsB,iBA1Eb,KA4Ef5B,GAAoBA,EAAiByC,aAAeC,YAAYC,SACnEvB,QAAQC,MAAM,8CACdrB,EAAmB,IAAI0C,YAAYzC,GACnCD,EAAiB8B,QAAUxB,KAAKwB,QAChC9B,EAAiBiC,OAAS3B,KAAK2B,OAG/BjC,EAAiB4C,iBAAiB,UAAWtC,KAAKmB,gBAClDtB,GAAY,EACZiB,QAAQC,MAAM,yBAElB,EAEAf,KAAK0B,0BAA4B,WAC/B,MAAM,WAAES,GAAezC,EACvB,IAAI6C,EAAU,CACZhC,KAAM,QACNiC,MAAO,WAET,OAAQL,GACN,KAAKC,YAAYK,WACfF,EAAQC,MAAQ,UAChB,MACF,KAAKJ,YAAYM,KACfH,EAAQC,MAAQ,OAChB,MACF,KAAKJ,YAAYC,OACfE,EAAQC,MAAQ,QAChB,MACF,QACED,EAAQC,MAAQ,UAChB1B,QAAQW,MACN,4EACAU,GAKN1C,EAAYsC,SAAQ,SAAUC,GAC5BA,EAAW1B,YAAYiC,EACzB,GACF,CACD,CA3HD,G","sources":["webpack://openmct/webpack/universalModuleDefinition","webpack://openmct/./src/plugins/persistence/couch/CouchChangesFeed.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openmct\"] = factory();\n\telse\n\t\troot[\"openmct\"] = factory();\n})(this, () => {\nreturn ","(function () {\n  const connections = [];\n  let connected = false;\n  let couchEventSource;\n  let changesFeedUrl;\n  const keepAliveTime = 20 * 1000;\n  let keepAliveTimer;\n  const controller = new AbortController();\n\n  self.onconnect = function (e) {\n    let port = e.ports[0];\n    connections.push(port);\n\n    port.postMessage({\n      type: 'connection',\n      connectionId: connections.length\n    });\n\n    port.onmessage = function (event) {\n      if (event.data.request === 'close') {\n        console.debug('ðŸšª Closing couch connection ðŸšª');\n        connections.splice(event.data.connectionId - 1, 1);\n        if (connections.length <= 0) {\n          // abort any outstanding requests if there's nobody listening to it.\n          controller.abort();\n        }\n\n        connected = false;\n        // stop listening for events\n        couchEventSource.removeEventListener('message', self.onCouchMessage);\n        couchEventSource.close();\n        console.debug('ðŸšª Closed couch connection ðŸšª');\n\n        return;\n      }\n\n      if (event.data.request === 'changes') {\n        if (connected === true) {\n          return;\n        }\n\n        changesFeedUrl = event.data.url;\n        self.listenForChanges();\n      }\n    };\n\n    port.start();\n  };\n\n  self.onerror = function (error) {\n    self.updateCouchStateIndicator();\n    console.error('ðŸš¨ Error on CouchDB feed ðŸš¨', error);\n  };\n\n  self.onopen = function () {\n    self.updateCouchStateIndicator();\n  };\n\n  self.onCouchMessage = function (event) {\n    self.updateCouchStateIndicator();\n    console.debug('ðŸ“© Received message from CouchDB ðŸ“©');\n\n    const objectChanges = JSON.parse(event.data);\n    connections.forEach(function (connection) {\n      connection.postMessage({\n        objectChanges\n      });\n    });\n  };\n\n  self.listenForChanges = function () {\n    if (keepAliveTimer) {\n      clearTimeout(keepAliveTimer);\n    }\n\n    /**\n     * Once the connection has been opened, poll every 20 seconds to see if the EventSource has closed unexpectedly.\n     * If it has, attempt to reconnect.\n     */\n    keepAliveTimer = setTimeout(self.listenForChanges, keepAliveTime);\n\n    if (!couchEventSource || couchEventSource.readyState === EventSource.CLOSED) {\n      console.debug('â‡¿ Opening CouchDB change feed connection â‡¿');\n      couchEventSource = new EventSource(changesFeedUrl);\n      couchEventSource.onerror = self.onerror;\n      couchEventSource.onopen = self.onopen;\n\n      // start listening for events\n      couchEventSource.addEventListener('message', self.onCouchMessage);\n      connected = true;\n      console.debug('â‡¿ Opened connection â‡¿');\n    }\n  };\n\n  self.updateCouchStateIndicator = function () {\n    const { readyState } = couchEventSource;\n    let message = {\n      type: 'state',\n      state: 'pending'\n    };\n    switch (readyState) {\n      case EventSource.CONNECTING:\n        message.state = 'pending';\n        break;\n      case EventSource.OPEN:\n        message.state = 'open';\n        break;\n      case EventSource.CLOSED:\n        message.state = 'close';\n        break;\n      default:\n        message.state = 'unknown';\n        console.error(\n          'ðŸš¨ Received unexpected readyState value from CouchDB EventSource feed: ðŸš¨',\n          readyState\n        );\n        break;\n    }\n\n    connections.forEach(function (connection) {\n      connection.postMessage(message);\n    });\n  };\n})();\n"],"names":["root","factory","exports","module","define","amd","this","connections","couchEventSource","changesFeedUrl","keepAliveTimer","connected","controller","AbortController","self","onconnect","e","port","ports","push","postMessage","type","connectionId","length","onmessage","event","data","request","console","debug","splice","abort","removeEventListener","onCouchMessage","close","url","listenForChanges","start","onerror","error","updateCouchStateIndicator","onopen","objectChanges","JSON","parse","forEach","connection","clearTimeout","setTimeout","readyState","EventSource","CLOSED","addEventListener","message","state","CONNECTING","OPEN"],"sourceRoot":""}