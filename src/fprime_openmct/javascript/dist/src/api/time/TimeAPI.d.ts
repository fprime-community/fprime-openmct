export default TimeAPI;
/**
 * The public API for setting and querying the temporal state of the
 * application. The concept of time is integral to Open MCT, and at least
 * one {@link TimeSystem}, as well as some default time bounds must be
 * registered and enabled via {@link TimeAPI.addTimeSystem} and
 * {@link TimeAPI.timeSystem} respectively for Open MCT to work.
 *
 * Time-sensitive views will typically respond to changes to bounds or other
 * properties of the time conductor and update the data displayed based on
 * the temporal state of the application. The current time bounds are also
 * used in queries for historical data.
 *
 * The TimeAPI extends the GlobalTimeContext which in turn extends the TimeContext/EventEmitter class. A number of events are
 * fired when properties of the time conductor change, which are documented
 * below.
 *
 * @interface
 * @memberof module:openmct
 */
declare class TimeAPI extends GlobalTimeContext {
    constructor(openmct: any);
    openmct: any;
    independentContexts: Map<any, any>;
    /**
     * A TimeSystem provides meaning to the values returned by the TimeAPI. Open
     * MCT supports multiple different types of time values, although all are
     * intrinsically represented by numbers, the meaning of those numbers can
     * differ depending on context.
     *
     * A default time system is provided by Open MCT in the form of the {@link UTCTimeSystem},
     * which represents integer values as ms in the Unix epoch. An example of
     * another time system might be "sols" for a Martian mission. TimeSystems do
     * not address the issue of converting between time systems.
     *
     * @typedef {object} TimeSystem
     * @property {string} key A unique identifier
     * @property {string} name A human-readable descriptor
     * @property {string} [cssClass] Specify a css class defining an icon for
     * this time system. This will be visible next to the time system in the
     * menu in the Time Conductor
     * @property {string} timeFormat The key of a format to use when displaying
     * discrete timestamps from this time system
     * @property {string} [durationFormat] The key of a format to use when
     * displaying a duration or relative span of time in this time system.
     */
    /**
     * Register a new time system. Once registered it can activated using
     * {@link TimeAPI.timeSystem}, and can be referenced via its key in [Time Conductor configuration](@link https://github.com/nasa/openmct/blob/master/API.md#time-conductor).
     * @memberof module:openmct.TimeAPI#
     * @param {TimeSystem} timeSystem A time system object.
     */
    addTimeSystem(timeSystem: {
        /**
         * A unique identifier
         */
        key: string;
        /**
         * A human-readable descriptor
         */
        name: string;
        /**
         * Specify a css class defining an icon for
         * this time system. This will be visible next to the time system in the
         * menu in the Time Conductor
         */
        cssClass?: string | undefined;
        /**
         * The key of a format to use when displaying
         * discrete timestamps from this time system
         */
        timeFormat: string;
        /**
         * The key of a format to use when
         * displaying a duration or relative span of time in this time system.
         */
        durationFormat?: string | undefined;
    }): void;
    /**
     * @returns {TimeSystem[]}
     */
    getAllTimeSystems(): {
        /**
         * A unique identifier
         */
        key: string;
        /**
         * A human-readable descriptor
         */
        name: string;
        /**
         * Specify a css class defining an icon for
         * this time system. This will be visible next to the time system in the
         * menu in the Time Conductor
         */
        cssClass?: string | undefined;
        /**
         * The key of a format to use when displaying
         * discrete timestamps from this time system
         */
        timeFormat: string;
        /**
         * The key of a format to use when
         * displaying a duration or relative span of time in this time system.
         */
        durationFormat?: string | undefined;
    }[];
    /**
     * Clocks provide a timing source that is used to
     * automatically update the time bounds of the data displayed in Open MCT.
     *
     * @typedef {object} Clock
     * @memberof openmct.timeAPI
     * @property {string} key A unique identifier
     * @property {string} name A human-readable name. The name will be used to
     * represent this clock in the Time Conductor UI
     * @property {string} description A longer description, ideally identifying
     * what the clock ticks on.
     * @property {function} currentValue Returns the last value generated by a tick, or a default value
     * if no ticking has yet occurred
     * @see {LocalClock}
     */
    /**
     * Register a new Clock.
     * @memberof module:openmct.TimeAPI#
     * @param {Clock} clock
     */
    addClock(clock: object): void;
    /**
     * @memberof module:openmct.TimeAPI#
     * @returns {Clock[]}
     * @memberof module:openmct.TimeAPI#
     */
    getAllClocks(): object[];
    /**
     * Get or set an independent time context which follows the TimeAPI timeSystem,
     * but with different offsets for a given domain object
     * @param {key | string} key The identifier key of the domain object these offsets are set for
     * @param {ClockOffsets | TimeBounds} value This maintains a sliding time window of a fixed width that automatically updates
     * @param {key | string} clockKey the real time clock key currently in use
     * @memberof module:openmct.TimeAPI#
     * @method addIndependentTimeContext
     */
    addIndependentContext(key: any, value: ClockOffsets | TimeBounds, clockKey: any | string): () => void;
    /**
     * Get the independent time context which follows the TimeAPI timeSystem,
     * but with different offsets.
     * @param {key | string} key The identifier key of the domain object these offsets
     * @memberof module:openmct.TimeAPI#
     * @method getIndependentTimeContext
     */
    getIndependentContext(key: any): any;
    /**
     * Get the a timeContext for a view based on it's objectPath. If there is any object in the objectPath with an independent time context, it will be returned.
     * Otherwise, the global time context will be returned.
     * @param { Array } objectPath The view's objectPath
     * @memberof module:openmct.TimeAPI#
     * @method getContextForView
     */
    getContextForView(objectPath: any[]): any;
}
import GlobalTimeContext from './GlobalTimeContext';
//# sourceMappingURL=TimeAPI.d.ts.map