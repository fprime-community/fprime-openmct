{"version":3,"file":"generatorWorker.js","mappings":"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","sources":["webpack://openmct/webpack/universalModuleDefinition","webpack://openmct/./example/generator/generatorWorker.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openmct\"] = factory();\n\telse\n\t\troot[\"openmct\"] = factory();\n})(this, () => {\nreturn ","/*****************************************************************************\n * Open MCT, Copyright (c) 2014-2023, United States Government\n * as represented by the Administrator of the National Aeronautics and Space\n * Administration. All rights reserved.\n *\n * Open MCT is licensed under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n *\n * Open MCT includes source code licensed under additional open source\n * licenses. See the Open Source Licenses file (LICENSES.md) included with\n * this source code distribution or the Licensing information page available\n * at runtime from the About dialog for additional information.\n *****************************************************************************/\n\n(function () {\n  var FIFTEEN_MINUTES = 15 * 60 * 1000;\n\n  var handlers = {\n    subscribe: onSubscribe,\n    unsubscribe: onUnsubscribe,\n    request: onRequest\n  };\n\n  var subscriptions = {};\n\n  function workSubscriptions(timestamp) {\n    var now = Date.now();\n    var nextWork = Math.min.apply(\n      Math,\n      Object.values(subscriptions).map(function (subscription) {\n        return subscription(now);\n      })\n    );\n    var wait = nextWork - now;\n    if (wait < 0) {\n      wait = 0;\n    }\n\n    if (Number.isFinite(wait)) {\n      setTimeout(workSubscriptions, wait);\n    }\n  }\n\n  function onSubscribe(message) {\n    var data = message.data;\n\n    // Keep\n    var start = Date.now();\n    var step = 1000 / data.dataRateInHz;\n    var nextStep = start - (start % step) + step;\n    let work;\n    if (data.spectra) {\n      work = function (now) {\n        while (nextStep < now) {\n          const messageCopy = Object.create(message);\n          message.data.start = nextStep - 60 * 1000;\n          message.data.end = nextStep;\n          onRequest(messageCopy);\n          nextStep += step;\n        }\n\n        return nextStep;\n      };\n    } else {\n      work = function (now) {\n        while (nextStep < now) {\n          self.postMessage({\n            id: message.id,\n            data: {\n              name: data.name,\n              utc: nextStep,\n              yesterday: nextStep - 60 * 60 * 24 * 1000,\n              sin: sin(\n                nextStep,\n                data.period,\n                data.amplitude,\n                data.offset,\n                data.phase,\n                data.randomness,\n                data.infinityValues\n              ),\n              wavelengths: wavelengths(),\n              intensities: intensities(),\n              cos: cos(\n                nextStep,\n                data.period,\n                data.amplitude,\n                data.offset,\n                data.phase,\n                data.randomness,\n                data.infinityValues\n              )\n            }\n          });\n          nextStep += step;\n        }\n\n        return nextStep;\n      };\n    }\n\n    subscriptions[message.id] = work;\n    workSubscriptions();\n  }\n\n  function onUnsubscribe(message) {\n    delete subscriptions[message.data.id];\n  }\n\n  function onRequest(message) {\n    var request = message.data;\n    if (request.end === undefined) {\n      request.end = Date.now();\n    }\n\n    if (request.start === undefined) {\n      request.start = request.end - FIFTEEN_MINUTES;\n    }\n\n    var now = Date.now();\n    var start = request.start;\n    var end = request.end > now ? now : request.end;\n    var amplitude = request.amplitude;\n    var period = request.period;\n    var offset = request.offset;\n    var dataRateInHz = request.dataRateInHz;\n    var phase = request.phase;\n    var randomness = request.randomness;\n    var loadDelay = Math.max(request.loadDelay, 0);\n    var infinityValues = request.infinityValues;\n\n    var step = 1000 / dataRateInHz;\n    var nextStep = start - (start % step) + step;\n\n    var data = [];\n\n    for (; nextStep < end && data.length < 5000; nextStep += step) {\n      data.push({\n        utc: nextStep,\n        yesterday: nextStep - 60 * 60 * 24 * 1000,\n        sin: sin(nextStep, period, amplitude, offset, phase, randomness, infinityValues),\n        wavelengths: wavelengths(),\n        intensities: intensities(),\n        cos: cos(nextStep, period, amplitude, offset, phase, randomness, infinityValues)\n      });\n    }\n\n    if (loadDelay === 0) {\n      postOnRequest(message, request, data);\n    } else {\n      setTimeout(() => postOnRequest(message, request, data), loadDelay);\n    }\n  }\n\n  function postOnRequest(message, request, data) {\n    self.postMessage({\n      id: message.id,\n      data: request.spectra\n        ? {\n            wavelength: data.map((item) => {\n              return item.wavelength;\n            }),\n            cos: data.map((item) => {\n              return item.cos;\n            })\n          }\n        : data\n    });\n  }\n\n  function cos(timestamp, period, amplitude, offset, phase, randomness, infinityValues) {\n    if (infinityValues && Math.random() > 0.5) {\n      return Number.POSITIVE_INFINITY;\n    }\n\n    return (\n      amplitude * Math.cos(phase + (timestamp / period / 1000) * Math.PI * 2) +\n      amplitude * Math.random() * randomness +\n      offset\n    );\n  }\n\n  function sin(timestamp, period, amplitude, offset, phase, randomness, infinityValues) {\n    if (infinityValues && Math.random() > 0.5) {\n      return Number.POSITIVE_INFINITY;\n    }\n\n    return (\n      amplitude * Math.sin(phase + (timestamp / period / 1000) * Math.PI * 2) +\n      amplitude * Math.random() * randomness +\n      offset\n    );\n  }\n\n  function wavelengths() {\n    let values = [];\n    while (values.length < 5) {\n      const randomValue = Math.random() * 100;\n      if (!values.includes(randomValue)) {\n        values.push(String(randomValue));\n      }\n    }\n\n    return values;\n  }\n\n  function intensities() {\n    let values = [];\n    while (values.length < 5) {\n      const randomValue = Math.random() * 10;\n      if (!values.includes(randomValue)) {\n        values.push(String(randomValue));\n      }\n    }\n\n    return values;\n  }\n\n  function sendError(error, message) {\n    self.postMessage({\n      error: error.name + ': ' + error.message,\n      message: message,\n      id: message.id\n    });\n  }\n\n  self.onmessage = function handleMessage(event) {\n    var message = event.data;\n    var handler = handlers[message.request];\n\n    if (!handler) {\n      sendError(new Error('unknown message type'), message);\n    } else {\n      try {\n        handler(message);\n      } catch (e) {\n        sendError(e, message);\n      }\n    }\n  };\n})();\n"],"names":["root","factory","exports","module","define","amd","this","handlers","subscribe","message","data","start","Date","now","step","dataRateInHz","nextStep","work","spectra","messageCopy","Object","create","end","onRequest","self","postMessage","id","name","utc","yesterday","sin","period","amplitude","offset","phase","randomness","infinityValues","wavelengths","intensities","cos","subscriptions","workSubscriptions","unsubscribe","request","timestamp","wait","Math","min","apply","values","map","subscription","Number","isFinite","setTimeout","undefined","loadDelay","max","length","push","postOnRequest","wavelength","item","random","POSITIVE_INFINITY","PI","randomValue","includes","String","sendError","error","onmessage","event","handler","e","Error"],"sourceRoot":""}